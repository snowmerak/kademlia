// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.33.0
// source: rpc/rpc.proto

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Common message header for all RPC messages
type RPCHeader struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageId     []byte                 `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`    // UUID for request/response matching
	SenderId      []byte                 `protobuf:"bytes,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`       // Sender's Kademlia node ID
	SenderAddr    string                 `protobuf:"bytes,3,opt,name=sender_addr,json=senderAddr,proto3" json:"sender_addr,omitempty"` // Sender's address "host:port"
	Timestamp     int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                    // Unix timestamp in milliseconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RPCHeader) Reset() {
	*x = RPCHeader{}
	mi := &file_rpc_rpc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RPCHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCHeader) ProtoMessage() {}

func (x *RPCHeader) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_rpc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCHeader.ProtoReflect.Descriptor instead.
func (*RPCHeader) Descriptor() ([]byte, []int) {
	return file_rpc_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *RPCHeader) GetMessageId() []byte {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *RPCHeader) GetSenderId() []byte {
	if x != nil {
		return x.SenderId
	}
	return nil
}

func (x *RPCHeader) GetSenderAddr() string {
	if x != nil {
		return x.SenderAddr
	}
	return ""
}

func (x *RPCHeader) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Contact information for a node
type Contact struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                // Kademlia node ID
	PublicKey     []byte                 `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"` // Node's public key
	Addrs         []string               `protobuf:"bytes,3,rep,name=addrs,proto3" json:"addrs,omitempty"`                          // Network addresses (e.g., multiaddr format)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Contact) Reset() {
	*x = Contact{}
	mi := &file_rpc_rpc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_rpc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_rpc_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *Contact) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contact) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *Contact) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

type PingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Header        *RPCHeader             `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	PublicKey     []byte                 `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"` // Sender's public key for verification
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_rpc_rpc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_rpc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_rpc_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *PingRequest) GetHeader() *RPCHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PingRequest) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type PingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Header        *RPCHeader             `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	PublicKey     []byte                 `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"` // Responder's public key
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_rpc_rpc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_rpc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_rpc_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *PingResponse) GetHeader() *RPCHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PingResponse) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type FindNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Header        *RPCHeader             `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	TargetId      []byte                 `protobuf:"bytes,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"` // Target Kademlia ID to search for
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindNodeRequest) Reset() {
	*x = FindNodeRequest{}
	mi := &file_rpc_rpc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNodeRequest) ProtoMessage() {}

func (x *FindNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_rpc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNodeRequest.ProtoReflect.Descriptor instead.
func (*FindNodeRequest) Descriptor() ([]byte, []int) {
	return file_rpc_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *FindNodeRequest) GetHeader() *RPCHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FindNodeRequest) GetTargetId() []byte {
	if x != nil {
		return x.TargetId
	}
	return nil
}

type FindNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Header        *RPCHeader             `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Contacts      []*Contact             `protobuf:"bytes,2,rep,name=contacts,proto3" json:"contacts,omitempty"` // Up to k closest nodes
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindNodeResponse) Reset() {
	*x = FindNodeResponse{}
	mi := &file_rpc_rpc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNodeResponse) ProtoMessage() {}

func (x *FindNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_rpc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNodeResponse.ProtoReflect.Descriptor instead.
func (*FindNodeResponse) Descriptor() ([]byte, []int) {
	return file_rpc_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *FindNodeResponse) GetHeader() *RPCHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FindNodeResponse) GetContacts() []*Contact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

var File_rpc_rpc_proto protoreflect.FileDescriptor

const file_rpc_rpc_proto_rawDesc = "" +
	"\n" +
	"\rrpc/rpc.proto\x12\bkademlia\"\x86\x01\n" +
	"\tRPCHeader\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\fR\tmessageId\x12\x1b\n" +
	"\tsender_id\x18\x02 \x01(\fR\bsenderId\x12\x1f\n" +
	"\vsender_addr\x18\x03 \x01(\tR\n" +
	"senderAddr\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp\"N\n" +
	"\aContact\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\fR\x02id\x12\x1d\n" +
	"\n" +
	"public_key\x18\x02 \x01(\fR\tpublicKey\x12\x14\n" +
	"\x05addrs\x18\x03 \x03(\tR\x05addrs\"Y\n" +
	"\vPingRequest\x12+\n" +
	"\x06header\x18\x01 \x01(\v2\x13.kademlia.RPCHeaderR\x06header\x12\x1d\n" +
	"\n" +
	"public_key\x18\x02 \x01(\fR\tpublicKey\"Z\n" +
	"\fPingResponse\x12+\n" +
	"\x06header\x18\x01 \x01(\v2\x13.kademlia.RPCHeaderR\x06header\x12\x1d\n" +
	"\n" +
	"public_key\x18\x02 \x01(\fR\tpublicKey\"[\n" +
	"\x0fFindNodeRequest\x12+\n" +
	"\x06header\x18\x01 \x01(\v2\x13.kademlia.RPCHeaderR\x06header\x12\x1b\n" +
	"\ttarget_id\x18\x02 \x01(\fR\btargetId\"n\n" +
	"\x10FindNodeResponse\x12+\n" +
	"\x06header\x18\x01 \x01(\v2\x13.kademlia.RPCHeaderR\x06header\x12-\n" +
	"\bcontacts\x18\x02 \x03(\v2\x11.kademlia.ContactR\bcontactsB#Z!github.com/snowmerak/kademlia/rpcb\x06proto3"

var (
	file_rpc_rpc_proto_rawDescOnce sync.Once
	file_rpc_rpc_proto_rawDescData []byte
)

func file_rpc_rpc_proto_rawDescGZIP() []byte {
	file_rpc_rpc_proto_rawDescOnce.Do(func() {
		file_rpc_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rpc_rpc_proto_rawDesc), len(file_rpc_rpc_proto_rawDesc)))
	})
	return file_rpc_rpc_proto_rawDescData
}

var file_rpc_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_rpc_rpc_proto_goTypes = []any{
	(*RPCHeader)(nil),        // 0: kademlia.RPCHeader
	(*Contact)(nil),          // 1: kademlia.Contact
	(*PingRequest)(nil),      // 2: kademlia.PingRequest
	(*PingResponse)(nil),     // 3: kademlia.PingResponse
	(*FindNodeRequest)(nil),  // 4: kademlia.FindNodeRequest
	(*FindNodeResponse)(nil), // 5: kademlia.FindNodeResponse
}
var file_rpc_rpc_proto_depIdxs = []int32{
	0, // 0: kademlia.PingRequest.header:type_name -> kademlia.RPCHeader
	0, // 1: kademlia.PingResponse.header:type_name -> kademlia.RPCHeader
	0, // 2: kademlia.FindNodeRequest.header:type_name -> kademlia.RPCHeader
	0, // 3: kademlia.FindNodeResponse.header:type_name -> kademlia.RPCHeader
	1, // 4: kademlia.FindNodeResponse.contacts:type_name -> kademlia.Contact
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_rpc_rpc_proto_init() }
func file_rpc_rpc_proto_init() {
	if File_rpc_rpc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rpc_rpc_proto_rawDesc), len(file_rpc_rpc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rpc_rpc_proto_goTypes,
		DependencyIndexes: file_rpc_rpc_proto_depIdxs,
		MessageInfos:      file_rpc_rpc_proto_msgTypes,
	}.Build()
	File_rpc_rpc_proto = out.File
	file_rpc_rpc_proto_goTypes = nil
	file_rpc_rpc_proto_depIdxs = nil
}
